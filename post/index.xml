<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 深樹博客</title>
    <link>https://deeptree.me/post/</link>
    <description>Recent content in Posts on 深樹博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 31 Dec 2018 21:53:55 +0800</lastBuildDate>
    
	<atom:link href="https://deeptree.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018年报总结</title>
      <link>https://deeptree.me/post/2018/12/2018/</link>
      <pubDate>Mon, 31 Dec 2018 21:53:55 +0800</pubDate>
      
      <guid>https://deeptree.me/post/2018/12/2018/</guid>
      <description> 迷茫与低迷 去年以「软件开发工程师」的身份进入上一家公司开始实习。在此期间，我大部分时间都在做后台管理系统，公司里的小伙伴人均「全栈」， 我自然也是学习Spring Boot全家桶（Java）+Vue全家桶（JavaScript），期间也完成了人生中第一个技术分享（关于webpack）。同时也很感谢陆老师和华哥，学到了各种经验。 但越学越迷茫，因为我做日常小需求没啥问题，可日后出去面试是前端还是后端呢？
随后在v2ex上征询了下前辈们的意见，最后还是决定向着自己更喜欢的前端方向走。年后找工作的经历跌宕起伏，但结果是好的。
重新开始 今年年中以「前端开发工程师」的身份进入现在的公司。从CSS弱鸡成长到常规布局和动画都能应付了；从Vue全家桶也转到React全家桶。 也接触了组件库开发、webpack优化、babel升级和node端的开发，这符合我心中大前端的概念。 虽然比较辛苦，但是也感觉到自己在快速成长中，感谢整个前端组的伙伴们，帮助了我许多。
展望  尽可能在开源社区做出贡献 深入基本原理 分享 健身?女朋友?  </description>
    </item>
    
    <item>
      <title>一键上传canvas所生成的图片至CDN</title>
      <link>https://deeptree.me/post/2018/07/uploadcanvasimg/</link>
      <pubDate>Tue, 17 Jul 2018 17:47:01 +0800</pubDate>
      
      <guid>https://deeptree.me/post/2018/07/uploadcanvasimg/</guid>
      <description>起因 最近在做动态生成海报的项目，有生成海报后上传当前canvas图片的需求。
分析 脑袋一拍，思索出流程是这样canvas=&amp;gt;base64=&amp;gt;POST接口。但是常见的CDN不支持base64啊！查了下发现有canvas.toBlob（兼容性为Chrome50+）
于是流程改为canvas=&amp;gt;blob=&amp;gt;POST接口，但发现CDN还是不吃这一套，接口报错
思来想去，决定用普通的手动上传方式&amp;lt;input type=&amp;quot;file&amp;quot; /&amp;gt;看下请求格式（如图）
从Content-Type可以看出需要使用FormData对象去上传
红框部分则是&amp;lt;input type=&amp;quot;file&amp;quot; /&amp;gt;所生成的
分析一通后，梳理流程为canvas=&amp;gt;blob=&amp;gt;File=&amp;gt;FormData=&amp;gt;POST
代码 upload = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { canvasInstance.toBlob(blob =&amp;gt; { // blob转file const file = new File([blob], &#39;poster.png&#39;, { type: &#39;image/png&#39;, lastModified: Date.now() }) const xhr = new XMLHttpRequest() xhr.onreadystatechange = () =&amp;gt; { try { if (xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 400) { const res = JSON.</description>
    </item>
    
    <item>
      <title>addEventListener中的passive属性踩坑</title>
      <link>https://deeptree.me/post/2018/06/passive/</link>
      <pubDate>Sat, 23 Jun 2018 22:42:31 +0800</pubDate>
      
      <guid>https://deeptree.me/post/2018/06/passive/</guid>
      <description>起因  在移动端使用event.preventDefault()来阻止touchstart和touchmove事件发现无法实现
 打开Chrome控制台发现打印了如下文字
[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080  点进网页看看发生了什么！
 AddEventListenerOptions defaults passive to false. With this change touchstart and touchmove listeners added to the document will default to passive:true (so that calls to preventDefault will be ignored)..
If the value is explicitly provided in the AddEventListenerOptions it will continue having the value specified by the page.</description>
    </item>
    
  </channel>
</rss>